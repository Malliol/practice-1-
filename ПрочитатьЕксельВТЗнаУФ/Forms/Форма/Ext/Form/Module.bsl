Функция ПроверитьИмя(Имя)  // немного не понял
	НовоеИмя = Имя;
	УправлениеСвойствамиСлужебный.УдалитьНедопустимыеСимволы(НовоеИмя);
	Если НовоеИмя <> Имя
		Или УправлениеСвойствамиСлужебный.ИмяНачинаетсяСЦифры(Имя)
		Или СтрРазделить(НовоеИмя, " ", Истина).Количество() > 1 Тогда		
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции
	
Функция ПолучитьИмяКолонкиТаблицыЗначений(ЗаголовокОбъекта)
	Имя = "";
	
	УправлениеСвойствамиСлужебный.УдалитьНедопустимыеСимволы(ЗаголовокОбъекта);
	ЗаголовокОбъектаЧастями = СтрРазделить(ЗаголовокОбъекта, " ", Ложь);
	Для Каждого ЧастьЗаголовка Из ЗаголовокОбъектаЧастями Цикл
		Имя = Имя + ?(Имя = "","","_")+ВРег(Лев(ЧастьЗаголовка, 1)) + Сред(ЧастьЗаголовка, 2);
	КонецЦикла;
	
	Если УправлениеСвойствамиСлужебный.ИмяНачинаетсяСЦифры(Имя) Тогда
		Имя = "_" + Имя;
	КонецЕсли;
	ИсходноеИмя = Имя; 
	Счетчик = 1;
	Пока НЕ ПроверитьИмя(Имя) Цикл
		Имя = ИсходноеИмя + "_" + Счетчик;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	Возврат Имя;
КонецФункции

Функция УдалитьПервыйСимвол(Строка,КоличествоУдаляемыхСимволов = 1)	
	ДлинаСтроки = СтрДлина(Строка) - КоличествоУдаляемыхСимволов;	
	Возврат Прав(Строка, ДлинаСтроки);
КонецФункции      

Функция УдалитьДвойныеПробелы(Знач СтрокаСПробелами)
	Пока СтрНайти(СтрокаСПробелами,"  ") <> 0 Цикл
		СтрокаСПробелами = СтрЗаменить(СтрокаСПробелами,"  "," ");	
	КонецЦикла; 
	Если Лев(СтрокаСПробелами,1) = Символы.ПС Тогда
		СтрокаСПробелами = УдалитьПервыйСимвол(СтрокаСПробелами);
	КонецЕсли;
	Возврат СокрЛП(СтрокаСПробелами);
КонецФункции

Функция ПодготовиСтроку(СтрокаДляПодготовик)
	Возврат УдалитьДвойныеПробелы(СтрокаДляПодготовик);
КонецФункции

Функция ТабличныйДокументВТаблицуЗначения(ТабДок)
	ТаблицаЗначенийДляВозврат = Новый ТаблицаЗначений;
	
	КоличествоСтрок 	= ТабДок.ВысотаТаблицы;                                              
	КоличествоКолонок 	= ТабДок.ШиринаТаблицы;
	Если КоличествоСтрок = 0 Тогда
		Возврат ТаблицаЗначенийДляВозврат;
	КонецЕсли;
	Колонки = ТаблицаЗначенийДляВозврат.Колонки;
	СписокВыбораГрупп = Новый СписокЗначений();
	Для НомерКолонки = 1 По КоличествоКолонок Цикл
		ИмяКолонки = ТабДок.Область(1, НомерКолонки).Текст;
		Колонки.Добавить(ПолучитьИмяКолонкиТаблицыЗначений(ИмяКолонки),,ИмяКолонки);
		Элементы.СписокГрупп.СписокВыбора.Добавить(ПолучитьИмяКолонкиТаблицыЗначений(ИмяКолонки),ИмяКолонки);
	КонецЦикла;
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		Если НомерСтроки = 1 Тогда
			Продолжить;			
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаЗначенийДляВозврат.Добавить();
		Для НомерКолонки = 1 По КоличествоКолонок Цикл
			ИмяКолонки 					= ПолучитьИмяКолонкиТаблицыЗначений(ТабДок.Область(1, НомерКолонки).Текст);
			ЗначениеЯчейки 				= ТабДок.Область(НомерСтроки, НомерКолонки).Текст;
			СтрокаТаблицы[ИмяКолонки] 	= ПодготовиСтроку(ЗначениеЯчейки);
		КонецЦикла;	
	КонецЦикла;
	Элементы.СписокГрупп.СписокВыбора.Вставить(0, "", "По всем");
	//Элементы.СписокГрупп.СписокВыбора.ЗагрузитьЗначения(СписокВыбораГрупп.ВыгрузитьЗначения());
	СписокВыбора = "По всем";
	
	Возврат ТаблицаЗначенийДляВозврат;
КонецФункции

&НаСервере
Процедура ВывестиТаблицуЗначенияВТаблицуНаФорме(ТаблицаЗначений, ТабРеквизит, ТабЭлементФормы = Неопределено)
	Если ТабЭлементФормы = Неопределено Тогда
		ТабЭлементФормы = ТабРеквизит;
	КонецЕсли; 
	
	// Собирается инофрмация по добавленным ранее элементам формы и реквизитам, на которые элементы формы ссылаются.
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеЭлементы = Новый Массив;
	Для каждого Эл Из Элементы[ТабЭлементФормы].ПодчиненныеЭлементы Цикл
		УдаляемыеРеквизиты.Добавить(Эл.ПутьКДанным);
		УдаляемыеЭлементы.Добавить(Эл);
	КонецЦикла; 
	Для каждого Эл Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Эл);
	КонецЦикла; 
	
	// Добавляются колонки из ТаблицыЗначений в реквизит таблицы ТабРеквизит
	НовыеРеквизиты = Новый Массив;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		НовыйРеквизит = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ТабРеквизит, Колонка.Заголовок);
	   	НовыеРеквизиты.Добавить(НовыйРеквизит);
	КонецЦикла;

    //Удаляются старые и устанавливаются новые реквизиты
	ИзменитьРеквизиты(НовыеРеквизиты, УдаляемыеРеквизиты);
	
    // Добавляются колонки из ТаблицыЗначений в элементы ТабЭлементФормы со ссылкой на колонки в ТабРеквизит
    Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
        НовыйЭлемент = Элементы.Добавить( ТабРеквизит + "_" + Колонка.Имя, Тип("ПолеФормы"), Элементы[ТабЭлементФормы]);
        НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи; //Или ПолеВвода, или что-то другое;
        НовыйЭлемент.ПутьКДанным = ТабРеквизит + "." + Колонка.Имя;
    КонецЦикла;
 
 	// В созданный реквизит загружается ТЗ
	ЭтаФорма[ТабРеквизит].Загрузить(ТаблицаЗначений);
КонецПроцедуры

&НаСервере
Процедура ПолучитьИзИнтернетаНаСервере()
	АдресСервера = "https://oksei.ru/studentu/raspisanie_uchebnykh_zanyatij";

    ПараметрыПолучения = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
    ПараметрыПолучения.Таймаут = 60;

    Результат = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(АдресСервера, ПараметрыПолучения);

	Если Результат.Статус Тогда

	    Данные = ПолучитьИзВременногоХранилища(Результат.Путь);
	    УдалитьИзВременногоХранилища(Результат.Путь);
		
		ЧтениеHTML = Новый ЧтениеHTML;
		ЧтениеHTML.ОткрытьПоток(Данные.ОткрытьПотокДляЧтения());
		//ВремФайл = ПолучитьИмяВременногоФайла("mxl");
		//Данные.Записать(ВремФайл);
		ПостроительDOM = Новый ПостроительDOM;
		ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
		ЧтениеHTML.Закрыть();
		curr_rasp = ДокументHTML.ПолучитьЭлементПоИдентификатору("curr_rasp");
		Если ТипЗнч(curr_rasp) = Тип("ЭлементЯкорьHTML") Тогда
			ФайлРасписания = "https://oksei.ru/"+curr_rasp.Гиперссылка;
		Иначе
			ФайлРасписания = "";
		КонецЕсли;			
		Результат = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(ФайлРасписания, ПараметрыПолучения);
		Если Результат.Статус Тогда
			ДанныеФайлаРасписания = ПолучитьИзВременногоХранилища(Результат.Путь);
			ДанныеФайлаРасписания.Записать("C:\temp\tab.xls");
	    	УдалитьИзВременногоХранилища(Результат.Путь); 
			ТабДок = Новый ТабличныйДокумент;
	
			Попытка
				// чтение данных из файла в табличный документ
				ТабДок.Прочитать("C:\temp\tab.xls");
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не удалось прочитать файл, по причине: " + ОписаниеОшибки();
				Сообщение.Сообщить();                                                        
				Возврат;
			КонецПопытки;
			
			ТаблицаИзExcel = ТабличныйДокументВТаблицуЗначения(ТабДок);
	        ВывестиТаблицуЗначенияВТаблицуНаФорме(ТаблицаИзExcel, "ТаблицаНаФормеИзExcel");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзИнтернета(Команда)
	ПолучитьИзИнтернетаНаСервере();
	Для Каждого КолонкаТаблицы Из Элементы.ТаблицаНаФормеИзExcel.ПодчиненныеЭлементы Цикл
		Если КолонкаТаблицы.Имя = "ТаблицаНаФормеИзExcel_День_Недели" Тогда
			Продолжить;
		КонецЕсли;
		Если КолонкаТаблицы.Имя = "ТаблицаНаФормеИзExcel_Номер_Пары" Тогда
			Продолжить;
		КонецЕсли; 
		КолонкаТаблицы.Видимость = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокГруппОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	//Элементы.СписокГрупп.вы  
	Для Каждого КолонкаТаблицы Из Элементы.ТаблицаНаФормеИзExcel.ПодчиненныеЭлементы Цикл
		Если КолонкаТаблицы.Имя = "ТаблицаНаФормеИзExcel_День_Недели" Тогда
			Продолжить;
		КонецЕсли;
		Если КолонкаТаблицы.Имя = "ТаблицаНаФормеИзExcel_Номер_Пары" Тогда
			Продолжить;
		КонецЕсли;
		Если КолонкаТаблицы.Имя <> "ТаблицаНаФормеИзExcel_"+ВыбранноеЗначение Тогда
			КолонкаТаблицы.Видимость = Ложь;
		Иначе
			КолонкаТаблицы.Видимость = Истина;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
